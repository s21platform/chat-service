// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/s21platform/chat-service/internal/model"
)

// MockDBRepo is a mock of DBRepo interface.
type MockDBRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepoMockRecorder
}

// MockDBRepoMockRecorder is the mock recorder for MockDBRepo.
type MockDBRepoMockRecorder struct {
	mock *MockDBRepo
}

// NewMockDBRepo creates a new mock instance.
func NewMockDBRepo(ctrl *gomock.Controller) *MockDBRepo {
	mock := &MockDBRepo{ctrl: ctrl}
	mock.recorder = &MockDBRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepo) EXPECT() *MockDBRepoMockRecorder {
	return m.recorder
}

// CreatePrivateChat mocks base method.
func (m *MockDBRepo) CreatePrivateChat(initiator, companion *model.ChatMemberParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateChat", initiator, companion)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateChat indicates an expected call of CreatePrivateChat.
func (mr *MockDBRepoMockRecorder) CreatePrivateChat(initiator, companion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateChat", reflect.TypeOf((*MockDBRepo)(nil).CreatePrivateChat), initiator, companion)
}

// DeleteMessage mocks base method.
func (m *MockDBRepo) DeleteMessage(messageID, mode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", messageID, mode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockDBRepoMockRecorder) DeleteMessage(messageID, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockDBRepo)(nil).DeleteMessage), messageID, mode)
}

// EditMessage mocks base method.
func (m *MockDBRepo) EditMessage(messageID, newContent string) (*model.EditedMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMessage", messageID, newContent)
	ret0, _ := ret[0].(*model.EditedMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditMessage indicates an expected call of EditMessage.
func (mr *MockDBRepoMockRecorder) EditMessage(messageID, newContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMessage", reflect.TypeOf((*MockDBRepo)(nil).EditMessage), messageID, newContent)
}

// GetChats mocks base method.
func (m *MockDBRepo) GetChats(userUUID string) (*model.ChatInfoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChats", userUUID)
	ret0, _ := ret[0].(*model.ChatInfoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChats indicates an expected call of GetChats.
func (mr *MockDBRepoMockRecorder) GetChats(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChats", reflect.TypeOf((*MockDBRepo)(nil).GetChats), userUUID)
}

// GetPrivateRecentMessages mocks base method.
func (m *MockDBRepo) GetPrivateRecentMessages(chatUUID, userUUID string) (*model.MessageList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateRecentMessages", chatUUID, userUUID)
	ret0, _ := ret[0].(*model.MessageList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateRecentMessages indicates an expected call of GetPrivateRecentMessages.
func (mr *MockDBRepoMockRecorder) GetPrivateRecentMessages(chatUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateRecentMessages", reflect.TypeOf((*MockDBRepo)(nil).GetPrivateRecentMessages), chatUUID, userUUID)
}

// MockUserClient is a mock of UserClient interface.
type MockUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientMockRecorder
}

// MockUserClientMockRecorder is the mock recorder for MockUserClient.
type MockUserClientMockRecorder struct {
	mock *MockUserClient
}

// NewMockUserClient creates a new mock instance.
func NewMockUserClient(ctrl *gomock.Controller) *MockUserClient {
	mock := &MockUserClient{ctrl: ctrl}
	mock.recorder = &MockUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserClient) EXPECT() *MockUserClientMockRecorder {
	return m.recorder
}

// GetUserInfoByUUID mocks base method.
func (m *MockUserClient) GetUserInfoByUUID(ctx context.Context, userUUID string) (*model.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByUUID", ctx, userUUID)
	ret0, _ := ret[0].(*model.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByUUID indicates an expected call of GetUserInfoByUUID.
func (mr *MockUserClientMockRecorder) GetUserInfoByUUID(ctx, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByUUID", reflect.TypeOf((*MockUserClient)(nil).GetUserInfoByUUID), ctx, userUUID)
}
